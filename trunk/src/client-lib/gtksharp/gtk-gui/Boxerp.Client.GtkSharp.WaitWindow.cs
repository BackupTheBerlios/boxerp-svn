// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic.SteticGenerated {
    
    
    internal class BoxerpClientGtkSharpWaitWindow {
        
        public static void Build(Gtk.Window cobj) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            // Widget Boxerp.Client.GtkSharp.WaitWindow
            cobj.Name = "Boxerp.Client.GtkSharp.WaitWindow";
            cobj.Title = Mono.Unix.Catalog.GetString("Operation in progress...");
            cobj.WindowPosition = ((Gtk.WindowPosition)(1));
            // Container child Boxerp.Client.GtkSharp.WaitWindow.Gtk.Container+ContainerChild
            Gtk.VBox w1 = new Gtk.VBox();
            bindings["vbox"] = w1;
            w1.Events = ((Gdk.EventMask)(256));
            w1.Name = "vbox";
            w1.Spacing = 2;
            w1.BorderWidth = ((uint)(5));
            // Container child vbox.Gtk.Box+BoxChild
            Gtk.Label w2 = new Gtk.Label();
            bindings["labelMsg"] = w2;
            w2.Name = "labelMsg";
            w2.LabelProp = "Please wait";
            w1.Add(w2);
            Gtk.Box.BoxChild w3 = ((Gtk.Box.BoxChild)(w1[w2]));
            w3.Position = 0;
            // Container child vbox.Gtk.Box+BoxChild
            Gtk.ProgressBar w4 = new Gtk.ProgressBar();
            bindings["progressbar"] = w4;
            w4.Name = "progressbar";
            w1.Add(w4);
            Gtk.Box.BoxChild w5 = ((Gtk.Box.BoxChild)(w1[w4]));
            w5.Position = 1;
            w5.Expand = false;
            w5.Fill = false;
            // Container child vbox.Gtk.Box+BoxChild
            Gtk.HButtonBox w6 = new Gtk.HButtonBox();
            bindings["actionArea"] = w6;
            w6.Events = ((Gdk.EventMask)(256));
            w6.Name = "actionArea";
            w6.Spacing = 10;
            w6.BorderWidth = ((uint)(5));
            w6.LayoutStyle = ((Gtk.ButtonBoxStyle)(2));
            // Container child actionArea.Gtk.ButtonBox+ButtonBoxChild
            Gtk.Button w7 = new Gtk.Button();
            bindings["button"] = w7;
            w7.CanDefault = true;
            w7.CanFocus = true;
            w7.Name = "button";
            // Container child button.Gtk.Container+ContainerChild
            Gtk.Alignment w8 = new Gtk.Alignment(0.5F, 0.5F, 0F, 0F);
            bindings["GtkAlignment"] = w8;
            w8.Name = "GtkAlignment";
            // Container child GtkAlignment.Gtk.Container+ContainerChild
            Gtk.HBox w9 = new Gtk.HBox();
            bindings["GtkHBox"] = w9;
            w9.Name = "GtkHBox";
            w9.Spacing = 2;
            // Container child GtkHBox.Gtk.Container+ContainerChild
            Gtk.Image w10 = new Gtk.Image();
            bindings["image215"] = w10;
            w10.Name = "image215";
            w10.Pixbuf = Stetic.IconLoader.LoadIcon("gtk-cancel", 16);
            w9.Add(w10);
            // Container child GtkHBox.Gtk.Container+ContainerChild
            Gtk.Label w12 = new Gtk.Label();
            bindings["GtkLabel"] = w12;
            w12.Name = "GtkLabel";
            w12.LabelProp = Mono.Unix.Catalog.GetString("Cancel");
            w9.Add(w12);
            w8.Add(w9);
            w7.Add(w8);
            w6.Add(w7);
            Gtk.ButtonBox.ButtonBoxChild w16 = ((Gtk.ButtonBox.ButtonBoxChild)(w6[w7]));
            w16.Expand = false;
            w16.Fill = false;
            w1.Add(w6);
            Gtk.Box.BoxChild w17 = ((Gtk.Box.BoxChild)(w1[w6]));
            w17.Position = 2;
            w17.Expand = false;
            w17.Fill = false;
            cobj.Add(w1);
            if ((cobj.Child != null)) {
                cobj.Child.ShowAll();
            }
            cobj.DefaultWidth = 400;
            cobj.DefaultHeight = 119;
            cobj.Show();
            cobj.DeleteEvent += ((Gtk.DeleteEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.DeleteEventHandler), cobj, "OnDeleteEvent")));
            w7.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnCancel")));
            System.Reflection.FieldInfo[] fields = cobj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(cobj, widget);
                }
            }
        }
    }
}
