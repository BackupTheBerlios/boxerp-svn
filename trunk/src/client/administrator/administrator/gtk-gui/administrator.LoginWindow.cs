// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic.SteticGenerated {
    
    
    internal class administratorLoginWindow {
        
        public static void Build(Gtk.Window cobj) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            // Widget administrator.LoginWindow
            cobj.Name = "administrator.LoginWindow";
            cobj.Title = Mono.Unix.Catalog.GetString("Boxerp Server Administrator");
            cobj.WindowPosition = ((Gtk.WindowPosition)(1));
            cobj.Modal = true;
            cobj.Resizable = false;
            cobj.AllowGrow = false;
            // Container child administrator.LoginWindow.Gtk.Container+ContainerChild
            Gtk.VBox w1 = new Gtk.VBox();
            bindings["vbox1"] = w1;
            w1.Name = "vbox1";
            w1.BorderWidth = ((uint)(5));
            // Container child vbox1.Gtk.Box+BoxChild
            Gtk.HBox w2 = new Gtk.HBox();
            bindings["hbox1"] = w2;
            w2.Name = "hbox1";
            // Container child hbox1.Gtk.Box+BoxChild
            Gtk.Label w3 = new Gtk.Label();
            bindings["label1"] = w3;
            w3.WidthRequest = 150;
            w3.Name = "label1";
            w3.LabelProp = "Login:";
            w2.Add(w3);
            Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(w2[w3]));
            w4.Position = 0;
            // Container child hbox1.Gtk.Box+BoxChild
            Gtk.Entry w5 = new Gtk.Entry();
            bindings["entryLogin"] = w5;
            w5.WidthRequest = 200;
            w5.CanFocus = true;
            w5.Name = "entryLogin";
            w5.Text = "demo";
            w5.IsEditable = true;
            w5.MaxLength = 100;
            w5.InvisibleChar = '●';
            w2.Add(w5);
            Gtk.Box.BoxChild w6 = ((Gtk.Box.BoxChild)(w2[w5]));
            w6.Position = 1;
            w6.Expand = false;
            w6.Fill = false;
            w1.Add(w2);
            Gtk.Box.BoxChild w7 = ((Gtk.Box.BoxChild)(w1[w2]));
            w7.Position = 0;
            w7.Expand = false;
            w7.Fill = false;
            // Container child vbox1.Gtk.Box+BoxChild
            Gtk.HBox w8 = new Gtk.HBox();
            bindings["hbox2"] = w8;
            w8.WidthRequest = 150;
            w8.Name = "hbox2";
            // Container child hbox2.Gtk.Box+BoxChild
            Gtk.Label w9 = new Gtk.Label();
            bindings["label2"] = w9;
            w9.Name = "label2";
            w9.LabelProp = "Password:";
            w8.Add(w9);
            Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(w8[w9]));
            w10.Position = 0;
            w10.Fill = false;
            // Container child hbox2.Gtk.Box+BoxChild
            Gtk.Entry w11 = new Gtk.Entry();
            bindings["entryPassword"] = w11;
            w11.WidthRequest = 200;
            w11.CanFocus = true;
            w11.Name = "entryPassword";
            w11.Text = "pass";
            w11.IsEditable = true;
            w11.Visibility = false;
            w11.InvisibleChar = '●';
            w8.Add(w11);
            Gtk.Box.BoxChild w12 = ((Gtk.Box.BoxChild)(w8[w11]));
            w12.Position = 1;
            w12.Expand = false;
            w12.Fill = false;
            w1.Add(w8);
            Gtk.Box.BoxChild w13 = ((Gtk.Box.BoxChild)(w1[w8]));
            w13.Position = 1;
            // Container child vbox1.Gtk.Box+BoxChild
            Gtk.HSeparator w14 = new Gtk.HSeparator();
            bindings["hseparator1"] = w14;
            w14.Name = "hseparator1";
            w1.Add(w14);
            Gtk.Box.BoxChild w15 = ((Gtk.Box.BoxChild)(w1[w14]));
            w15.Position = 2;
            w15.Expand = false;
            w15.Fill = false;
            // Container child vbox1.Gtk.Box+BoxChild
            Gtk.HBox w16 = new Gtk.HBox();
            bindings["hbox3"] = w16;
            w16.Name = "hbox3";
            // Container child hbox3.Gtk.Box+BoxChild
            Gtk.Button w17 = new Gtk.Button();
            bindings["buttonConnect"] = w17;
            w17.CanFocus = true;
            w17.Name = "buttonConnect";
            // Container child buttonConnect.Gtk.Container+ContainerChild
            Gtk.Alignment w18 = new Gtk.Alignment(0.5F, 0.5F, 0F, 0F);
            bindings["GtkAlignment"] = w18;
            w18.Name = "GtkAlignment";
            // Container child GtkAlignment.Gtk.Container+ContainerChild
            Gtk.HBox w19 = new Gtk.HBox();
            bindings["GtkHBox"] = w19;
            w19.Name = "GtkHBox";
            w19.Spacing = 2;
            // Container child GtkHBox.Gtk.Container+ContainerChild
            Gtk.Image w20 = new Gtk.Image();
            bindings["image30"] = w20;
            w20.Name = "image30";
            w20.Pixbuf = Stetic.IconLoader.LoadIcon("gtk-connect", 16);
            w19.Add(w20);
            // Container child GtkHBox.Gtk.Container+ContainerChild
            Gtk.Label w22 = new Gtk.Label();
            bindings["GtkLabel"] = w22;
            w22.Name = "GtkLabel";
            w22.LabelProp = Mono.Unix.Catalog.GetString("Connect");
            w19.Add(w22);
            w18.Add(w19);
            w17.Add(w18);
            w16.Add(w17);
            Gtk.Box.BoxChild w26 = ((Gtk.Box.BoxChild)(w16[w17]));
            w26.PackType = ((Gtk.PackType)(1));
            w26.Position = 0;
            w26.Expand = false;
            w26.Fill = false;
            w1.Add(w16);
            Gtk.Box.BoxChild w27 = ((Gtk.Box.BoxChild)(w1[w16]));
            w27.Position = 3;
            w27.Expand = false;
            w27.Fill = false;
            cobj.Add(w1);
            if ((cobj.Child != null)) {
                cobj.Child.ShowAll();
            }
            cobj.DefaultWidth = 370;
            cobj.DefaultHeight = 129;
            cobj.Show();
            cobj.DeleteEvent += ((Gtk.DeleteEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.DeleteEventHandler), cobj, "OnDeleteEvent")));
            w5.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnConnect")));
            w11.Activated += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnConnect")));
            w17.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnConnect")));
            System.Reflection.FieldInfo[] fields = cobj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(cobj, widget);
                }
            }
        }
    }
}
