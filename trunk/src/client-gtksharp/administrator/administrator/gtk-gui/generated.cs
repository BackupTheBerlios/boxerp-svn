// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    internal class Gui {
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            if ((id == "administrator.LoginWindow")) {
                Gtk.Window cobj = ((Gtk.Window)(obj));
                // Widget administrator.LoginWindow
                cobj.Title = "Boxerp Server Administrator";
                cobj.WindowPosition = ((Gtk.WindowPosition)(1));
                cobj.Modal = true;
                cobj.Resizable = false;
                cobj.AllowGrow = false;
                cobj.Events = ((Gdk.EventMask)(0));
                cobj.Name = "administrator.LoginWindow";
                // Container child administrator.LoginWindow.Gtk.Container+ContainerChild
                Gtk.VBox w1 = new Gtk.VBox();
                w1.BorderWidth = ((uint)(5));
                w1.Events = ((Gdk.EventMask)(0));
                w1.Name = "vbox1";
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.HBox w2 = new Gtk.HBox();
                w2.Events = ((Gdk.EventMask)(0));
                w2.Name = "hbox1";
                // Container child hbox1.Gtk.Box+BoxChild
                Gtk.Label w3 = new Gtk.Label();
                w3.LabelProp = "Login:";
                w3.Events = ((Gdk.EventMask)(0));
                w3.Name = "label1";
                bindings["label1"] = w3;
                w2.Add(w3);
                Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(w2[w3]));
                w4.Position = 0;
                // Container child hbox1.Gtk.Box+BoxChild
                Gtk.Entry w5 = new Gtk.Entry();
                w5.IsEditable = true;
                w5.MaxLength = 100;
                w5.InvisibleChar = '●';
                w5.CanFocus = true;
                w5.Events = ((Gdk.EventMask)(0));
                w5.Name = "entryLogin";
                w5.WidthRequest = 200;
                bindings["entryLogin"] = w5;
                w2.Add(w5);
                Gtk.Box.BoxChild w6 = ((Gtk.Box.BoxChild)(w2[w5]));
                w6.Position = 1;
                w6.Expand = false;
                w6.Fill = false;
                bindings["hbox1"] = w2;
                w1.Add(w2);
                Gtk.Box.BoxChild w7 = ((Gtk.Box.BoxChild)(w1[w2]));
                w7.Position = 0;
                w7.Expand = false;
                w7.Fill = false;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.HBox w8 = new Gtk.HBox();
                w8.Events = ((Gdk.EventMask)(0));
                w8.Name = "hbox2";
                // Container child hbox2.Gtk.Box+BoxChild
                Gtk.Label w9 = new Gtk.Label();
                w9.LabelProp = "Password:";
                w9.Events = ((Gdk.EventMask)(0));
                w9.Name = "label2";
                bindings["label2"] = w9;
                w8.Add(w9);
                Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(w8[w9]));
                w10.Position = 0;
                w10.Fill = false;
                // Container child hbox2.Gtk.Box+BoxChild
                Gtk.Entry w11 = new Gtk.Entry();
                w11.IsEditable = true;
                w11.Visibility = false;
                w11.InvisibleChar = '●';
                w11.CanFocus = true;
                w11.Events = ((Gdk.EventMask)(0));
                w11.Name = "entryPassword";
                w11.WidthRequest = 200;
                bindings["entryPassword"] = w11;
                w8.Add(w11);
                Gtk.Box.BoxChild w12 = ((Gtk.Box.BoxChild)(w8[w11]));
                w12.Position = 1;
                w12.Expand = false;
                w12.Fill = false;
                bindings["hbox2"] = w8;
                w1.Add(w8);
                Gtk.Box.BoxChild w13 = ((Gtk.Box.BoxChild)(w1[w8]));
                w13.Position = 1;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.HSeparator w14 = new Gtk.HSeparator();
                w14.Events = ((Gdk.EventMask)(0));
                w14.Name = "hseparator1";
                bindings["hseparator1"] = w14;
                w1.Add(w14);
                Gtk.Box.BoxChild w15 = ((Gtk.Box.BoxChild)(w1[w14]));
                w15.Position = 2;
                w15.Expand = false;
                w15.Fill = false;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.HBox w16 = new Gtk.HBox();
                w16.Events = ((Gdk.EventMask)(0));
                w16.Name = "hbox3";
                // Container child hbox3.Gtk.Box+BoxChild
                Gtk.Button w17 = new Gtk.Button();
                w17.CanFocus = true;
                w17.Events = ((Gdk.EventMask)(0));
                w17.Name = "buttonConnect";
                w17.Label = "Connect";
                bindings["buttonConnect"] = w17;
                w16.Add(w17);
                Gtk.Box.BoxChild w18 = ((Gtk.Box.BoxChild)(w16[w17]));
                w18.PackType = ((Gtk.PackType)(1));
                w18.Position = 0;
                w18.Expand = false;
                w18.Fill = false;
                bindings["hbox3"] = w16;
                w1.Add(w16);
                Gtk.Box.BoxChild w19 = ((Gtk.Box.BoxChild)(w1[w16]));
                w19.Position = 3;
                w19.Expand = false;
                w19.Fill = false;
                bindings["vbox1"] = w1;
                cobj.Add(w1);
                cobj.DefaultWidth = 334;
                cobj.DefaultHeight = 124;
                bindings["administrator.LoginWindow"] = cobj;
                w3.Show();
                w5.Show();
                w2.Show();
                w9.Show();
                w11.Show();
                w8.Show();
                w14.Show();
                w17.Show();
                w16.Show();
                w1.Show();
                cobj.Show();
                cobj.DeleteEvent += ((Gtk.DeleteEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.DeleteEventHandler), cobj, "OnDeleteEvent")));
                w17.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnConnect")));
            }
            else {
                if ((id == "MainWindow")) {
                    Gtk.Window cobj = ((Gtk.Window)(obj));
                    // Widget MainWindow
                    cobj.Title = "MainWindow";
                    cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                    cobj.Events = ((Gdk.EventMask)(0));
                    cobj.Name = "MainWindow";
                    cobj.DefaultWidth = 400;
                    cobj.DefaultHeight = 300;
                    bindings["MainWindow"] = cobj;
                    cobj.Show();
                    cobj.DeleteEvent += ((Gtk.DeleteEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.DeleteEventHandler), cobj, "OnDeleteEvent")));
                }
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
    
}
