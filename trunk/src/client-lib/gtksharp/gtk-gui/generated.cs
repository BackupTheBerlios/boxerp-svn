// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    
    internal class Gui {
        
        private static bool initialized;
        
        public static void Build(object cobj, System.Type type) {
            Stetic.Gui.Build(cobj, type.FullName);
        }
        
        public static void Build(object cobj, string id) {
            Stetic.Gui.Initialize();
            if ((id == "Boxerp.Client.GtkSharp.WaitWindow")) {
                Stetic.SteticGenerated.BoxerpClientGtkSharpWaitWindow.Build(((Gtk.Window)(cobj)));
            }
            else {
                if ((id == "button7")) {
                    Stetic.SteticGenerated.button7.Build(((Gtk.Button)(cobj)));
                }
                else {
                    if ((id == "Boxerp.Client.GtkSharp.SimpleListView")) {
                        Stetic.SteticGenerated.BoxerpClientGtkSharpSimpleListView.Build(((Gtk.Bin)(cobj)));
                    }
                    else {
                        if ((id == "Boxerp.Client.GtkSharp.SimpleTreeView")) {
                            Stetic.SteticGenerated.BoxerpClientGtkSharpSimpleTreeView.Build(((Gtk.Bin)(cobj)));
                        }
                        else {
                            if ((id == "Boxerp.Client.GtkSharp.QuestionDialog")) {
                                Stetic.SteticGenerated.BoxerpClientGtkSharpQuestionDialog.Build(((Gtk.Dialog)(cobj)));
                            }
                            else {
                                if ((id == "Boxerp.Client.GtkSharp.InfoDialog")) {
                                    Stetic.SteticGenerated.BoxerpClientGtkSharpInfoDialog.Build(((Gtk.Dialog)(cobj)));
                                }
                                else {
                                    if ((id == "Boxerp.Client.GtkSharp.FilteredListView")) {
                                        Stetic.SteticGenerated.BoxerpClientGtkSharpFilteredListView.Build(((Gtk.Bin)(cobj)));
                                    }
                                    else {
                                        if ((id == "Boxerp.Client.GtkSharp.DoubleListView")) {
                                            Stetic.SteticGenerated.BoxerpClientGtkSharpDoubleListView.Build(((Gtk.Bin)(cobj)));
                                        }
                                        else {
                                            if ((id == "Boxerp.Client.GtkSharp.Lib.LoginWindow")) {
                                                Stetic.SteticGenerated.BoxerpClientGtkSharpLibLoginWindow.Build(((Gtk.Window)(cobj)));
                                            }
                                            else {
                                                if ((id == "Boxerp.Client.GtkSharp.WarningDialog")) {
                                                    Stetic.SteticGenerated.BoxerpClientGtkSharpWarningDialog.Build(((Gtk.Dialog)(cobj)));
                                                }
                                                else {
                                                    if ((id == "MainWindow")) {
                                                        Stetic.SteticGenerated.MainWindow.Build(((Gtk.Window)(cobj)));
                                                    }
                                                    else {
                                                        if ((id == "Boxerp.Client.GtkSharp.InfoExtendedDialog")) {
                                                            Stetic.SteticGenerated.BoxerpClientGtkSharpInfoExtendedDialog.Build(((Gtk.Dialog)(cobj)));
                                                        }
                                                        else {
                                                            if ((id == "Boxerp.Client.GtkSharp.WaitDialog")) {
                                                                Stetic.SteticGenerated.BoxerpClientGtkSharpWaitDialog.Build(((Gtk.Dialog)(cobj)));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        internal static void Initialize() {
            if ((Stetic.Gui.initialized == false)) {
                Stetic.Gui.initialized = true;
            }
        }
    }
    
    internal class IconLoader {
        
        public static Gdk.Pixbuf LoadIcon(string name, int sz) {
            try {
                return Gtk.IconTheme.Default.LoadIcon(name, sz, 0);
            }
            catch (System.Exception ) {
                if ((name != "gtk-missing-image")) {
                    return Stetic.IconLoader.LoadIcon("gtk-missing-image", sz);
                }
                else {
                    Gdk.Pixmap pmap = new Gdk.Pixmap(Gdk.Screen.Default.RootWindow, sz, sz);
                    Gdk.GC gc = new Gdk.GC(pmap);
                    gc.RgbFgColor = new Gdk.Color(255, 255, 255);
                    pmap.DrawRectangle(gc, true, 0, 0, sz, sz);
                    gc.RgbFgColor = new Gdk.Color(0, 0, 0);
                    pmap.DrawRectangle(gc, false, 0, 0, (sz - 1), (sz - 1));
                    gc.SetLineAttributes(3, Gdk.LineStyle.Solid, Gdk.CapStyle.Round, Gdk.JoinStyle.Round);
                    gc.RgbFgColor = new Gdk.Color(255, 0, 0);
                    pmap.DrawLine(gc, (sz / 4), (sz / 4), ((sz - 1) - (sz / 4)), ((sz - 1) - (sz / 4)));
                    pmap.DrawLine(gc, ((sz - 1) - (sz / 4)), (sz / 4), (sz / 4), ((sz - 1) - (sz / 4)));
                    return Gdk.Pixbuf.FromDrawable(pmap, pmap.Colormap, 0, 0, 0, 0, sz, sz);
                }
            }
        }
    }
    
    internal class BinContainer {
        
        private Gtk.Widget child;
        
        private Gtk.UIManager uimanager;
        
        public static BinContainer Attach(Gtk.Bin bin) {
            BinContainer bc = new BinContainer();
            bin.SizeRequested += new Gtk.SizeRequestedHandler(bc.OnSizeRequested);
            bin.SizeAllocated += new Gtk.SizeAllocatedHandler(bc.OnSizeAllocated);
            bin.Added += new Gtk.AddedHandler(bc.OnAdded);
            return bc;
        }
        
        private void OnSizeRequested(object sender, Gtk.SizeRequestedArgs args) {
            if ((this.child != null)) {
                args.Requisition = this.child.SizeRequest();
            }
        }
        
        private void OnSizeAllocated(object sender, Gtk.SizeAllocatedArgs args) {
            if ((this.child != null)) {
                this.child.Allocation = args.Allocation;
            }
        }
        
        private void OnAdded(object sender, Gtk.AddedArgs args) {
            this.child = args.Widget;
        }
        
        public void SetUiManager(Gtk.UIManager uim) {
            this.uimanager = uim;
            this.child.Realized += new System.EventHandler(this.OnRealized);
        }
        
        private void OnRealized(object sender, System.EventArgs args) {
            if ((this.uimanager != null)) {
                Gtk.Widget w;
                w = this.child.Toplevel;
                if (((w != null) && typeof(Gtk.Window).IsInstanceOfType(w))) {
                    ((Gtk.Window)(w)).AddAccelGroup(this.uimanager.AccelGroup);
                    this.uimanager = null;
                }
            }
        }
    }
    
    internal class ActionGroups {
        
        public static Gtk.ActionGroup GetActionGroup(System.Type type) {
            return Stetic.ActionGroups.GetActionGroup(type.FullName);
        }
        
        public static Gtk.ActionGroup GetActionGroup(string name) {
            return null;
        }
    }
}
